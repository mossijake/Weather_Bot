import { Message, MessageEmbed } from "discord.js";
import {
  IMessageEditedIdentifier,
  IMessageEmbed,
  IMessageIdentifier,
  MessageType,
  Primitive,
} from "../../../types";
import { ExpectTest } from "../expectTest";
export declare abstract class MessageExpectTest extends ExpectTest {
  validateExpect(expect: Primitive | IMessageEmbed): import("../../../types").ITestReport | null;
  createReportForExpectAndResponse(
    expect: Primitive | IMessageEmbed,
    returnedMessage: Message,
  ): import("../../../types").ITestReport;
  isMessagesEquals(returnedMessage: Message, expectation: Primitive | IMessageEmbed): boolean;
  /**
   * Format Discord responses
   *
   * @param answer Discord response for a message sent
   *
   * @param type Type expected of that message
   *
   * @description Discord adds some attributes that are not present in embed message before it is sent
   *
   *  This is data **before** send to Discord
   *
   *  ```javascript
   *   "image": {
   *       "url": "https://i.imgur.com/wSTFkRM.png"
   *   },
   *   "thumbnail": {
   *       "url": "https://i.imgur.com/wSTFkRM.png"
   *   }
   *  ```
   *
   *  And this is part of embed message **after** get from Discord
   *
   *  ```javascript
   *   "image": {
   *     "height": 0,
   *     "proxyURL": "https://images-ext-2.discordapp.net/external/DoAGN014Q46B7iDBr2VJyHUL59QLSWdEAZ5wOoWe8CY/https/i.imgur.com/wSTFkRM.png",
   *     "url": "https://i.imgur.com/wSTFkRM.png",
   *     "width": 0
   *   },
   *   "thumbnail": {
   *       "height": 0,
   *       "proxyURL": "https://images-ext-2.discordapp.net/external/DoAGN014Q46B7iDBr2VJyHUL59QLSWdEAZ5wOoWe8CY/https/i.imgur.com/wSTFkRM.png",
   *       "url": "https://i.imgur.com/wSTFkRM.png",
   *      "width": 0
   *  }
   *  ```
   */
  getMessageByType(
    answer: Message | MessageEmbed,
    type: MessageType,
  ): string | IMessageEmbed | MessageEmbed | null;
  humanizeMessageIdentifierObject(
    msgIdentifier: IMessageIdentifier | IMessageEditedIdentifier,
  ): string;
  messageEmbedToMessageEmbedInterface(message: MessageEmbed): IMessageEmbed;
  embedMessageInterfaceToMessageEmbed(embedLike: IMessageEmbed): MessageEmbed;
}
