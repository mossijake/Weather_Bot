"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
exports.ToSetRoleColor = void 0;

const tslib_1 = require("tslib");

const chalk_1 = (0, tslib_1.__importDefault)(require("chalk"));

const utils_1 = require("../../../utils");

const roleUtils_1 = require("../../roleUtils");

const expectTest_1 = require("../expectTest");

class ToSetRoleColor extends expectTest_1.ExpectTest {
  constructor(params) {
    super({ ...params, testName: "toSetRoleColor" });
  }

  async action(color, roleIdentifier) {
    const identifier = roleUtils_1.roleUtils.getRoleData(roleIdentifier);
    const error = roleUtils_1.roleUtils.getErrorForUndefinedRoleData(identifier);

    if (error) {
      return this.createFailedTest(error);
    }

    if (!color) {
      return this.createReport(
        `toSetRoleColor: invalid color informed - '${(0, utils_1.typeOf)(color)}'`,
      );
    }

    const oldRole = await this.cordeBot.findRole(identifier);

    if (!oldRole) {
      return this.createFailedTest(roleUtils_1.roleUtils.validateRole(oldRole, identifier));
    }

    const numberColor = (0, utils_1.resolveColor)(color);

    try {
      await this.sendCommandMessage();
    } catch (error) {
      return this.createFailedTest(error.message);
    }

    let role;

    try {
      role = await this.cordeBot.events.onceRoleUpdateColor(identifier, this.timeout, this.guildId);
    } catch {
      if (this.isNot) {
        return this.createPassTest();
      }

      const resolvedExpectedColor = (0, utils_1.resolveColor)(oldRole.color);
      const fromLabelColor = createChalkLabelFromColor(resolvedExpectedColor);
      const toLabelColor = createChalkLabelFromColor(numberColor);
      return this.createReport(
        `expected: change role color from ${fromLabelColor(
          resolvedExpectedColor,
        )} to ${toLabelColor(numberColor)}\n`,
        "received: the color was not changed",
      );
    }

    if (role.color === numberColor) {
      this.hasPassed = true;
    }

    this.invertHasPassedIfIsNot();

    if (this.hasPassed) {
      return this.createPassTest();
    }

    const fromLabel = createChalkLabelFromColor(oldRole.color);
    const toLabel = createChalkLabelFromColor(numberColor);
    return this.createReport(
      `expected: ${this.isNot ? "not " : ""}change role color from ${fromLabel(
        oldRole.color,
      )} to ${toLabel(numberColor)}\n`,
      `received: ${role.color}`,
    );
  }
}

exports.ToSetRoleColor = ToSetRoleColor;

function createChalkLabelFromColor(color) {
  const [r, g, b] = (0, utils_1.rgba)(color);
  return chalk_1.default.rgb(r, g, b);
}
